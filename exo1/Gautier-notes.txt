1. Pour debug ce shellcode, je fais d'abord un hexdump pour l'analyser. Evidemment, rien d'intéressant. J'en fais ensuite un .hex pour l'examiner sous ghidra.

2. J'ai reconstruit le flow graph de manière lisible
3. Bien que le graphe soit lisible, Nous ne comprenons pas plus ce qu'il fait. Il doit être chiffré. Par conséquent, voyons voir comment cela se passe avec MIASM


4. Pas de nouvelles sur miasm. J'ai repris le cours avec le binaire encodé qui se réecrit lui même pour voir mais pas de succès. Ca bloque toujours sur un Access violation en 4000057 Sans plus d'info.

5. Je me suis rendu compte avoir mal géré: je n'avais pas besoin de filer le shellcode exfiltré via hexdump dans ghidra. Je pouvais le faire direct et avoir mon code. J'analyse donc pourquoi celui ci bloque en 4000057 maintenant que j'ai les bonnes addresses.


0x4000057 mene a un return. Forcément il bloquait vu que c'était la fin du programme. Il faut donc que je fasse en sorte qu'il passe cette étape.

Le premier bloque est simple: Du nop code, on met le PEB dans EDX, on le fait pointer vers la variable "BeingDebugged" et si elle n'est pas égale à 0 (donc si le programme detecte qu'on est en train de le débugger), il coupe le programme.


J'ai aussi pu voir en cherchant ce que voulais dire FS:0x30, qu'ensuite on vérifiait le nombre de processeur. Si le résultat est en dessous de 2 (JBE 0x2), on sort de nouveau.

Une fois que ces deux étapes sont passés, on part dans une autre fonction qui boucle sur lui même. Surement la fonction de déchiffrement.

Une fois que c'est fait, une dernière fonction est appelé qui elle en appelle 3 autres.




---------------------------------------------------
1. Conditions pour que le shellcode se lance entièrement.

Première condition: le programme ne doit pas détecter qu'il est debuggé

2e condition (supposition): le PEB en 0x64 est NumberOfProcessors. Donc il faut minimum 2 processeurs pour fonctionner

2. Quelles sont les structures testées ?
PEB, BeingDebugged, NumberOfProcessors, LDR, inMemoryOrderModuleList, ProcessParameters

On lit les ProcessParameters

3. Le shellcode prend deux dll (ESI et EDI) et les passe par deux méthode de hash différents

4.
